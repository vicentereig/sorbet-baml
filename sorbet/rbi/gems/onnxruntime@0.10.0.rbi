# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `onnxruntime` gem.
# Please instead update this file by running `bin/tapioca gem onnxruntime`.


# source://onnxruntime//lib/onnxruntime/datasets.rb#1
module OnnxRuntime
  class << self
    # Returns the value of attribute ffi_lib.
    #
    # source://onnxruntime//lib/onnxruntime.rb#16
    def ffi_lib; end

    # Sets the attribute ffi_lib
    #
    # @param value the value to set the attribute ffi_lib to.
    #
    # source://onnxruntime//lib/onnxruntime.rb#16
    def ffi_lib=(_arg0); end

    # source://onnxruntime//lib/onnxruntime.rb#37
    def lib_version; end
  end
end

# source://onnxruntime//lib/onnxruntime/datasets.rb#2
module OnnxRuntime::Datasets
  class << self
    # source://onnxruntime//lib/onnxruntime/datasets.rb#3
    def example(name); end
  end
end

# source://onnxruntime//lib/onnxruntime.rb#13
class OnnxRuntime::Error < ::StandardError; end

# source://onnxruntime//lib/onnxruntime/ffi.rb#2
module OnnxRuntime::FFI
  extend ::FFI::Library

  def OrtGetApiBase(*_arg0); end
  def OrtSessionOptionsAppendExecutionProvider_CoreML(*_arg0); end

  class << self
    def OrtGetApiBase(*_arg0); end
    def OrtSessionOptionsAppendExecutionProvider_CoreML(*_arg0); end

    # source://onnxruntime//lib/onnxruntime/ffi.rb#249
    def api; end
  end
end

# source://onnxruntime//lib/onnxruntime/ffi.rb#16
class OnnxRuntime::FFI::Api < ::FFI::Struct; end

# source://onnxruntime//lib/onnxruntime/ffi.rb#239
class OnnxRuntime::FFI::ApiBase < ::FFI::Struct; end

# https://github.com/microsoft/onnxruntime/blob/master/include/onnxruntime/core/session/onnxruntime_c_api.h
# keep same order
#
# source://onnxruntime//lib/onnxruntime/ffi.rb#10
OnnxRuntime::FFI::ORT_API_VERSION = T.let(T.unsafe(nil), Integer)

# source://onnxruntime//lib/onnxruntime/ffi.rb#14
OnnxRuntime::FFI::OnnxType = T.let(T.unsafe(nil), FFI::Enum)

# enums
#
# source://onnxruntime//lib/onnxruntime/ffi.rb#13
OnnxRuntime::FFI::TensorElementDataType = T.let(T.unsafe(nil), FFI::Enum)

# source://onnxruntime//lib/onnxruntime/inference_session.rb#2
class OnnxRuntime::InferenceSession
  # @return [InferenceSession] a new instance of InferenceSession
  #
  # source://onnxruntime//lib/onnxruntime/inference_session.rb#5
  def initialize(path_or_bytes, enable_cpu_mem_arena: T.unsafe(nil), enable_mem_pattern: T.unsafe(nil), enable_profiling: T.unsafe(nil), execution_mode: T.unsafe(nil), free_dimension_overrides_by_denotation: T.unsafe(nil), free_dimension_overrides_by_name: T.unsafe(nil), graph_optimization_level: T.unsafe(nil), inter_op_num_threads: T.unsafe(nil), intra_op_num_threads: T.unsafe(nil), log_severity_level: T.unsafe(nil), log_verbosity_level: T.unsafe(nil), logid: T.unsafe(nil), optimized_model_filepath: T.unsafe(nil), profile_file_prefix: T.unsafe(nil), session_config_entries: T.unsafe(nil), providers: T.unsafe(nil)); end

  # return value has double underscore like Python
  #
  # source://onnxruntime//lib/onnxruntime/inference_session.rb#191
  def end_profiling; end

  # Returns the value of attribute inputs.
  #
  # source://onnxruntime//lib/onnxruntime/inference_session.rb#3
  def inputs; end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#132
  def modelmeta; end

  # Returns the value of attribute outputs.
  #
  # source://onnxruntime//lib/onnxruntime/inference_session.rb#3
  def outputs; end

  # no way to set providers with C API yet
  # so we can return all available providers
  #
  # source://onnxruntime//lib/onnxruntime/inference_session.rb#203
  def providers; end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#91
  def run(output_names, input_feed, log_severity_level: T.unsafe(nil), log_verbosity_level: T.unsafe(nil), logid: T.unsafe(nil), terminate: T.unsafe(nil), output_type: T.unsafe(nil)); end

  # TODO support logid
  #
  # source://onnxruntime//lib/onnxruntime/inference_session.rb#104
  def run_with_ort_values(output_names, input_feed, log_severity_level: T.unsafe(nil), log_verbosity_level: T.unsafe(nil), logid: T.unsafe(nil), terminate: T.unsafe(nil)); end

  private

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#309
  def allocator_free(ptr); end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#305
  def api; end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#297
  def check_status(status); end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#270
  def create_input_tensor(input_feed); end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#288
  def create_node_names(names, refs); end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#333
  def env; end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#234
  def load_inputs; end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#252
  def load_outputs; end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#215
  def load_session(path_or_bytes, session_options); end

  # wide string on Windows
  # char string on Linux
  # see ORTCHAR_T in onnxruntime_c_api.h
  #
  # source://onnxruntime//lib/onnxruntime/inference_session.rb#320
  def ort_string(str); end

  # source://onnxruntime//lib/onnxruntime/inference_session.rb#301
  def tensor_types; end

  class << self
    # source://onnxruntime//lib/onnxruntime/inference_session.rb#313
    def api; end
  end
end

# source://onnxruntime//lib/onnxruntime/model.rb#2
class OnnxRuntime::Model
  # @return [Model] a new instance of Model
  #
  # source://onnxruntime//lib/onnxruntime/model.rb#3
  def initialize(path_or_bytes, **session_options); end

  # source://onnxruntime//lib/onnxruntime/model.rb#18
  def inputs; end

  # source://onnxruntime//lib/onnxruntime/model.rb#26
  def metadata; end

  # source://onnxruntime//lib/onnxruntime/model.rb#22
  def outputs; end

  # source://onnxruntime//lib/onnxruntime/model.rb#7
  def predict(input_feed, output_names: T.unsafe(nil), **run_options); end
end

# source://onnxruntime//lib/onnxruntime/ort_value.rb#2
class OnnxRuntime::OrtValue
  # @return [OrtValue] a new instance of OrtValue
  #
  # source://onnxruntime//lib/onnxruntime/ort_value.rb#3
  def initialize(ptr, ref = T.unsafe(nil)); end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#119
  def data_ptr; end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#86
  def data_type; end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#103
  def device_name; end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#95
  def element_type; end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#107
  def numo; end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#99
  def shape; end

  # @return [Boolean]
  #
  # source://onnxruntime//lib/onnxruntime/ort_value.rb#82
  def tensor?; end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#115
  def to_ptr; end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#111
  def to_ruby; end

  private

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#144
  def create_from_onnx_value(out_ptr, output_type); end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#238
  def create_strings_from_onnx_value(out_ptr, output_tensor_size, result); end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#255
  def reshape(arr, dims); end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#135
  def type_and_shape_info; end

  # source://onnxruntime//lib/onnxruntime/ort_value.rb#127
  def value_type; end

  class << self
    # source://onnxruntime//lib/onnxruntime/ort_value.rb#262
    def allocator_info; end

    # source://onnxruntime//lib/onnxruntime/ort_value.rb#15
    def from_array(input, element_type:); end

    # source://onnxruntime//lib/onnxruntime/ort_value.rb#8
    def from_numo(numo_obj); end

    # source://onnxruntime//lib/onnxruntime/ort_value.rb#39
    def from_shape_and_type(shape, element_type); end

    private

    # source://onnxruntime//lib/onnxruntime/ort_value.rb#52
    def create_input_data(input, tensor_type); end

    # source://onnxruntime//lib/onnxruntime/ort_value.rb#68
    def create_input_strings(input); end
  end
end

# source://onnxruntime//lib/onnxruntime/utils.rb#2
module OnnxRuntime::Utils
  class << self
    # source://onnxruntime//lib/onnxruntime/utils.rb#133
    def allocator; end

    # source://onnxruntime//lib/onnxruntime/utils.rb#16
    def api; end

    # source://onnxruntime//lib/onnxruntime/utils.rb#8
    def check_status(status); end

    # source://onnxruntime//lib/onnxruntime/utils.rb#119
    def input_shape(input); end

    # Returns the value of attribute mutex.
    #
    # source://onnxruntime//lib/onnxruntime/utils.rb#4
    def mutex; end

    # Sets the attribute mutex
    #
    # @param value the value to set the attribute mutex to.
    #
    # source://onnxruntime//lib/onnxruntime/utils.rb#4
    def mutex=(_arg0); end

    # source://onnxruntime//lib/onnxruntime/utils.rb#44
    def node_info(typeinfo); end

    # @return [Boolean]
    #
    # source://onnxruntime//lib/onnxruntime/utils.rb#99
    def numo_array?(obj); end

    # source://onnxruntime//lib/onnxruntime/utils.rb#103
    def numo_types; end

    # source://onnxruntime//lib/onnxruntime/utils.rb#24
    def tensor_type_and_shape(tensor_info); end

    # @raise [Error]
    #
    # source://onnxruntime//lib/onnxruntime/utils.rb#20
    def unsupported_type(name, type); end
  end
end

# source://onnxruntime//lib/onnxruntime/version.rb#2
OnnxRuntime::VERSION = T.let(T.unsafe(nil), String)
