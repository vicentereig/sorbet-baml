# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sorbet-struct-comparable` gem.
# Please instead update this file by running `bin/tapioca gem sorbet-struct-comparable`.


# source://sorbet-struct-comparable//lib/sorbet-struct-comparable/version.rb#4
module SorbetStructComparable; end

# source://sorbet-struct-comparable//lib/sorbet-struct-comparable/version.rb#5
SorbetStructComparable::VERSION = T.let(T.unsafe(nil), String)

class T::InexactStruct
  include ::T::Props
  include ::T::Props::Plugin
  include ::T::Props::Optional
  include ::T::Props::PrettyPrintable
  include ::T::Props::Serializable
  include ::T::Props::WeakConstructor
  include ::T::Props::Constructor
  extend ::T::Props::ClassMethods
  extend ::T::Props::Plugin::ClassMethods
  extend ::T::Props::Serializable::ClassMethods
end

# source://sorbet-struct-comparable//lib/t/struct/acts_as_comparable.rb#6
module T::Struct::ActsAsComparable
  include ::Comparable

  # source://sorbet-struct-comparable//lib/t/struct/acts_as_comparable.rb#14
  sig { params(other: ::Object).returns(T.nilable(::Integer)) }
  def <=>(other); end

  # source://sorbet-struct-comparable//lib/t/struct/acts_as_comparable.rb#26
  sig { params(other: ::Object).returns(T::Boolean) }
  def eql?(other); end

  # source://sorbet-struct-comparable//lib/t/struct/acts_as_comparable.rb#31
  sig { returns(::Integer) }
  def hash; end
end

# source://sorbet-struct-comparable//lib/t/struct/acts_as_comparable.rb#10
T::Struct::ActsAsComparable::EQUAL = T.let(T.unsafe(nil), Integer)

# source://sorbet-struct-comparable//lib/t/struct/acts_as_comparable.rb#11
T::Struct::ActsAsComparable::NOT_COMPARABLE = T.let(T.unsafe(nil), T.untyped)
